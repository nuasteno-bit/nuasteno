
    gsap.registerPlugin(ScrollTrigger);
    
    const deskThemeToggle = document.getElementById("desk-theme-toggle");
    const body = document.body;
    const savedTheme = localStorage.getItem("desk-theme");
    
    if (savedTheme === "dark") body.classList.add("dark-mode");

    deskThemeToggle.addEventListener("click", () => {
      body.classList.toggle("dark-mode");
      localStorage.setItem("desk-theme", body.classList.contains("dark-mode") ? "dark" : "light");
    });
    
    window.openQuickContact = function(event) {
      if (event) event.preventDefault();
      const modal = document.getElementById('quickContactModal');
      if (modal) {
        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
      }
    }
    
    window.closeQuickContact = function() {
      const modal = document.getElementById('quickContactModal');
      if (modal) {
        modal.classList.remove('show');
        document.body.style.overflow = '';
      }
    }
    
    window.handleQuickSubmit = function(event) {
      event.preventDefault();
      
      const formData = new FormData(event.target);
      const data = Object.fromEntries(formData);
      
      console.log('Ï†ëÏàò Îç∞Ïù¥ÌÑ∞:', data);
      
      alert('Ï†ëÏàòÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Îπ†Î•∏ ÏãúÏùº ÎÇ¥Ïóê Ïó∞ÎùΩÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.');
      
      event.target.reset();
      closeQuickContact();
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      const quickContactBtn = document.getElementById('quickContactBtn');
      if (quickContactBtn) {
        quickContactBtn.addEventListener('click', function(e) {
          e.preventDefault();
          window.openQuickContact(e);
        });
      }
      
      const modal = document.getElementById('quickContactModal');
      if (modal) {
        modal.addEventListener('click', function(event) {
          if (event.target === modal) {
            window.closeQuickContact();
          }
        });
      }
      
      const form = document.getElementById('quickContactForm');
      if (form) {
        form.addEventListener('submit', window.handleQuickSubmit);
      }
      
      const closeBtn = document.querySelector('.modal-close');
      if (closeBtn) {
        closeBtn.addEventListener('click', window.closeQuickContact);
      }
    });
    
    const solutions = [
      {
        title: 'ÏÜçÍ∏∞ÏÇ¨Í∞Ä ÏßÅÏ†ë Í∞úÎ∞úÌïú ÎßûÏ∂§Ìòï ÌîåÎû´Ìèº',
        subtitle: 'ÏÜçÍ∏∞ÏÇ¨Ïùò ÏãúÏÑ†ÏúºÎ°ú ÎßåÎì†, ÏÜçÍ∏∞ÏÇ¨ÏôÄ ÏùòÎ¢∞Ïù∏ÏùÑ ÏúÑÌïú ÏãúÏä§ÌÖú',
        description: '10ÎÖÑ Ïù¥ÏÉÅ ÌòÑÏû• ÏÜçÍ∏∞ Í≤ΩÌóòÏùÑ Î∞îÌÉïÏúºÎ°ú Í∞úÎ∞úÌïú ÌîåÎû´ÌèºÏûÖÎãàÎã§. Ïã§Ï†ú ÏóÖÎ¨¥ ÌùêÎ¶ÑÏóê ÏµúÏ†ÅÌôîÎêú Ìé∏Ïßë¬∑Í≤ÄÏàò¬∑Ï†ÑÎã¨ Íµ¨Ï°∞Î•º Íµ¨ÌòÑÌñàÏäµÎãàÎã§.',
        bullets: [
          'Í∏∞Ïà†Î≥¥Îã§ Í∏∞Î°ùÏùò Î≥∏ÏßàÏóê ÏßëÏ§ëÌïú UX ÏÑ§Í≥Ñ',
          'Î≤ïÏõê, Í∏∞Í¥Ä, Î∞©ÏÜ° ÌôòÍ≤ΩÏóêÏÑú Í≤ÄÏ¶ùÎêú Ïã§ÏÇ¨Ïö© Í∏∞Î∞ò'
        ],
        icon: 'üéØ',
        image: 'card9.jpg'
      },
      {
        title: 'Ïã†Î¢∞ÏôÄ Ìà¨Î™ÖÏÑ±Ïùò Í∏∞Î°ù Î¨∏Ìôî',
        subtitle: 'Í∏∞Î°ùÏùò Ïã†Î¢∞Îäî Ìà¨Î™ÖÌïú Ï†àÏ∞®ÏóêÏÑú ÏãúÏûëÎê©ÎãàÎã§',
        description: 'Î™®Îì† ÏûëÏóÖ Îã®Í≥ÑÎ•º Í∏∞Î°ùÌôîÌïòÍ≥† Í≤ÄÏàò Î°úÍ∑∏Î•º Í¥ÄÎ¶¨Ìï©ÎãàÎã§. ÌëúÏ§Ä ÌòïÏãùÏùÑ Ï§ÄÏàòÌïòÎ©∞ Î≤ïÏõê¬∑Í∏∞Í¥Ä Ï†úÏ∂úÏö© Î¨∏ÏÑú Í∑úÍ≤©Ïóê ÎåÄÏùëÌï©ÎãàÎã§.',
        bullets: [
          'Í∞úÏù∏Ï†ïÎ≥¥¬∑Î≥¥Ïïà¬∑ÎπÑÎ∞ÄÏú†ÏßÄ ÌòëÏïΩ Ï≤†Ï†Ä Ï§ÄÏàò',
          'ÏûëÏóÖ Ïù¥Î†•Ïùò Ï∂îÏ†Å Î∞è Í≤ÄÏ¶ù Í∞ÄÎä• Íµ¨Ï°∞ Íµ¨Ï∂ï'
        ],
        icon: 'üîí',
        image: 'card10.jpg'
      },
      {
        title: 'Ï†ÑÎ¨∏ÏÑ±Í≥º ÌíàÏßàÏùò Í∑†Ìòï',
        subtitle: 'Í∏∞Ïà†Í≥º ÏÇ¨ÎûåÏù¥ ÎßåÎìúÎäî ÏµúÏÉÅÏùò Í∏∞Î°ù ÌíàÏßà',
        description: 'ÏàôÎ†®Îêú Ï†ÑÎ¨∏Í∞ÄÏùò Í≤ΩÌóòÍ≥º ÏµúÏã† Í∏∞Ïà†ÏùÑ Í≤∞Ìï©ÌïòÏó¨ Ï†ïÌôïÎèÑÏôÄ Ìö®Ïú®ÏÑ±ÏùÑ ÎèôÏãúÏóê Îã¨ÏÑ±Ìï©ÎãàÎã§. Í∞Å Î∂ÑÏïºÎ≥Ñ Ï†ÑÎ¨∏ Ïö©Ïñ¥ÏôÄ Îß•ÎùΩÏùÑ Ïù¥Ìï¥ÌïòÎäî ÍπäÏù¥ ÏûàÎäî Í∏∞Î°ùÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.',
        bullets: [
          'AI Î≥¥Ï†ïÍ≥º Ï†ÑÎ¨∏Í∞Ä Í≤ÄÏàòÏùò Ïù¥Ï§ë ÌíàÏßà Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú',
          'Î∂ÑÏïºÎ≥Ñ Ï†ÑÎ¨∏ ÏÜçÍ∏∞ÏÇ¨ Î∞∞Ï†ïÏúºÎ°ú Îß•ÎùΩ ÏûàÎäî Í∏∞Î°ù Î≥¥Ïû•'
        ],
        icon: '‚ö°',
        image: 'card11.jpg'
      },
      {
        title: 'Ïú†ÎãàÎ≤ÑÏÑ§ ÎîîÏûêÏù∏Í≥º Ï†ëÍ∑ºÏÑ±',
        subtitle: 'ÎàÑÍµ¨ÏóêÍ≤åÎÇò ÏùΩÌûàÍ≥†, Ï†ÑÎã¨ÎêòÎäî Í∏∞Î°ùÏùÑ ÏúÑÌï¥',
        description: 'ÏÉâÍ∞Å¬∑ÏãúÍ∞Å ÏïΩÏûêÎèÑ Í≥†Î†§Ìïú Í∞ÄÎèÖÏÑ± Ï§ëÏã¨ UIÎ•º Íµ¨ÌòÑÌï©ÎãàÎã§. ÏûêÎßâ¬∑ÏÜçÍ∏∞¬∑Î¨∏ÏÑúÏùò ÏùºÍ¥ÄÎêú ÎîîÏûêÏù∏ Ïñ∏Ïñ¥Î•º Ï†ÅÏö©Ìï©ÎãàÎã§.',
        bullets: [
          'Ìà¨Î™Ö ÎîîÏä§ÌîåÎ†àÏù¥, Î™®Î∞îÏùº Îì± Îã§ÏñëÌïú ÌôòÍ≤Ω ÏßÄÏõê',
          'Ïû•Ïï†Ïù∏¬∑ÎπÑÏû•Ïï†Ïù∏ Î™®Îëê Ï†ëÍ∑º Í∞ÄÎä•Ìïú Ï†ïÎ≥¥ Ï†ÑÎã¨ Íµ¨Ï°∞'
        ],
        icon: '‚ôø',
        image: 'card12.jpg'
      }
    ];
    
    const credentials = [
      'Íµ≠Î¨¥Ïù¥Î¶¨ Î™©ÏöîÎåÄÌôî ÏÜçÍ∏∞ ÏàòÌñâ',
      'Íµ≠Í∞ÄÏù∏Í∂åÏúÑÏõêÌöå ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÏÇ∞ÏóÖÌÜµÏÉÅÏûêÏõêÎ∂Ä ÏóêÎÑàÏßÄÏúÑÏõêÌöå ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÍµêÏú°Î∂Ä ÍµêÏõêÍ∞ÑÎã¥Ìöå ÏÜçÍ∏∞ ÏàòÌñâ',
      'Ïù∏ÏÇ¨ÌòÅÏã†Ï≤ò Í≥µÎ¨¥Ïõê Í∞ÑÎã¥Ìöå ÏÜçÍ∏∞ ÏàòÌñâ',
      'Íµ≠Í∞ÄÍµêÏú°ÏúÑÏõêÌöå ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÏÑúÏö∏Ïãú Ï†ïÏ±ÖÎ∞ïÎûåÌöå ÏÜçÍ∏∞ ÏàòÌñâ',
      'Ïû•Ïï†Ïù∏Ïù¥ÎèôÌé∏ÏùòÏ¶ùÏßÑ ÌäπÎ≥ÑÏúÑÏõêÌöå ÏÜçÍ∏∞ ÏàòÌñâ',
      'Íµ≠Î¨¥Ï°∞Ï†ïÏã§ Ï≤≠ÎÖÑÍ∏∞Î≥∏Î≤ï ÌÜ†Î°†Ìöå ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÌïúÍµ≠Ìï≠ÎßåÍ≥µÏÇ¨ ÏÜçÍ∏∞ ÏàòÌñâ',
      'Ï†ïÎ∂ÄÌòÅÏã†Íµ≠ÎØºÌè¨Îüº ÏÜçÍ∏∞ ÏàòÌñâ',
      'Íµ≠Ìöå ÏßÑÎ≥¥Îãπ Ï§ëÏïôÏúÑÏõêÌöå Ïã§ÏãúÍ∞Ñ ÏûêÎßâ',
      'APEC Í≤ΩÏ£º Ïã§ÏãúÍ∞Ñ ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÏÑ∏Í≥ÑÏù∏Í∂åÎèÑÏãúÌè¨Îüº ÏÜçÍ∏∞ ÏàòÌñâ',
      'Ï†ú10Ìöå ÏïÑÏãúÏïÑÎØ∏ÎûòÌè¨Îüº ÏÜçÍ∏∞ ÏàòÌñâ',
      'Ïú†ÎÑ§Ïä§ÏΩî ÏÑ∏Í≥ÑÏú†ÏÇ∞ Ìï¥ÏÑù Íµ≠Ï†úÌöåÏùò ÏÜçÍ∏∞ ÏàòÌñâ',
      'Ï†ú10Ìöå Î¨∏ÌôîÏòàÏà†ÏÑ∏Í≥ÑÎåÄÌöå Ïã§ÏãúÍ∞Ñ ÏûêÎßâ',
      'ÌïúÍµ≠Ïù∏ÌÑ∞ÎÑ∑Í±∞Î≤ÑÎÑåÏä§Ìè¨Îüº ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÏÇ¨ÌöåÏ†ÅÍ∏∞ÏóÖ Íµ≠Ï†úÌè¨Îüº ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÏÑ∏Í≥ÑÎèÑÏãú ÌòÅÏã†Ï†ïÏ±ÖÍ≥µÏú† Ïã¨Ìè¨ÏßÄÏóÑ ÏÜçÍ∏∞ ÏàòÌñâ',
      'Î≥¥Ï°∞Í≥µÌïô Ïª®ÌçºÎü∞Ïä§ ÏÜçÍ∏∞ ÏàòÌñâ',
      'AI ÏãúÎåÄ Î™®ÎëêÎ•º ÏúÑÌïú ÍµêÏú° Ïª®ÌçºÎü∞Ïä§ Ïã§ÏãúÍ∞Ñ ÏûêÎßâ',
      'Ï≤¥Ïù∏ÏßÄÎ©îÏù¥Ïª§ Ïª®ÌçºÎü∞Ïä§ Ïã§ÏãúÍ∞Ñ ÏûêÎßâ',
      'Ïó∞Ìï©Îâ¥Ïä§TV ÌïúÎØ∏¬∑ÌïúÏùº Ï†ïÏÉÅÌöåÎã¥ ÎèôÏãúÌÜµÏó≠ ÏÜçÍ∏∞',
      'MBC ÎØ∏Íµ≠ Í∞úÌëúÎ∞©ÏÜ° Ïã§ÏãúÍ∞Ñ ÏûêÎßâ',
      'YTN Ïú§ÏÑùÏó¥ ÎØ∏ ÏùòÌöå Ïó∞ÏÑ§ ÌäπÎ≥¥ Ïã§ÏãúÍ∞Ñ ÏûêÎßâ',
      'ÏÑúÏö∏Íµ≠Ï†úÎèÑÏÑúÏ†Ñ Ïã§ÏãúÍ∞Ñ ÏûêÎßâ',
      'ÏÑúÏö∏Î¨∏ÌôîÏû¨Îã® ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÏÑúÏö∏Ïû•Ïï†Ïù∏Ïù∏Í∂åÏòÅÌôîÏ†ú Î¨∏ÏûêÌÜµÏó≠',
      'ÌïúÍµ≠ÏòÅÌôîÏßÑÌù•ÏúÑÏõêÌöå ÏÜçÍ∏∞ ÏàòÌñâ',
      'Í≤ΩÌù¨ÎåÄÌïôÍµê ÌèâÌôîÏùòÏ†ÑÎãπ ÏÜçÍ∏∞ ÏàòÌñâ',
      'Ïó∞ÏÑ∏ÎåÄÌïôÍµê Ïû•Ïï†Ïù∏Í∂åÏúÑÏõêÌöå ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÎØºÏ£ºÏÇ¨ÌöåÎ•º ÏúÑÌïú Î≥ÄÌò∏ÏÇ¨ Î™®ÏûÑ ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÌïúÍµ≠Ïû•Ïï†Ïù∏Í∞úÎ∞úÏõê ÏÜçÍ∏∞ ÏàòÌñâ',
      'ÌååÏù¥ÏΩò ÏΩîÎ¶¨ÏïÑ ÏÜçÍ∏∞ ÏàòÌñâ',
      'JSConf ÏÜçÍ∏∞ ÏàòÌñâ'
    ];
    
    let solutionIndex = 0;
    
    window.addEventListener('scroll', () => {
      const scrollTop = window.scrollY;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = (scrollTop / docHeight) * 100;
      
      const progressBar = document.querySelector('.progress-bar');
      if (progressBar) {
        progressBar.style.height = scrollPercent + '%';
      }
      
      const scrollIndicator = document.querySelector('.scroll-indicator');
      if (scrollIndicator) {
        if (scrollTop > 100) {
          scrollIndicator.classList.add('hidden');
        } else {
          scrollIndicator.classList.remove('hidden');
        }
      }
    });
    
    const fixedNavBlack = document.querySelector('.fixed-nav-black');
    const fixedNavYellow = document.querySelector('.fixed-nav-yellow');
    const fixedNavLive = document.querySelector('.fixed-nav-live');
    
    if (fixedNavBlack && fixedNavYellow && fixedNavLive) {
      ScrollTrigger.create({
        start: 'top+=150 top',
        end: 'max',
        onUpdate: (self) => {
          if (self.direction === 1) {
            fixedNavBlack.classList.add('is-collapsed');
            fixedNavYellow.classList.add('is-collapsed');
            fixedNavLive.classList.add('is-collapsed');
          } else {
            fixedNavBlack.classList.remove('is-collapsed');
            fixedNavYellow.classList.remove('is-collapsed');
            fixedNavLive.classList.remove('is-collapsed');
          }
        }
      });
    }
    
    function scrollToTop() {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
    
    const heroTL = gsap.timeline({ defaults: { ease: 'power3.out' } });
    heroTL
      .from('.hero-badge', { opacity: 0, y: 20, duration: 0.6 }, 0.5)
      .from('.hero-subtitle', { opacity: 0, y: 20, duration: 0.6 }, 0.8)
      .from('.hero-cta', { opacity: 0, y: 20, duration: 0.6 }, 1.1);
    
    function renderSolutions() {
      const slider = document.getElementById('solutionsSlider');
      const currentSlide = slider.querySelector('.solution-slide.active');
      
      const newContent = solutions.map((sol, i) => `
        <div class="solution-slide ${i === solutionIndex ? 'active' : ''}">
          <div class="solution-image">
            <img src="${sol.image}" alt="${sol.title}" 
                 style="width: 100%; height: 100%; object-fit: cover;" 
                 onerror="this.style.display='none'; this.parentElement.innerHTML='<div style=\\'font-size: 4rem;\\'>${sol.icon}</div>'">
          </div>
          <div class="solution-content">
            <div>
              <span class="solution-tag">Platform</span>
              <h3 class="solution-title">${sol.title}</h3>
              <p class="solution-subtitle">${sol.subtitle}</p>
              <p class="solution-desc">${sol.description}</p>
              <ul class="solution-bullets">
                ${sol.bullets.map(bullet => `
                  <li>
                    <span class="offering-bullet"></span>
                    <span>${bullet}</span>
                  </li>
                `).join('')}
              </ul>
            </div>
            <a href="#services" class="solution-link">
              ÏûêÏÑ∏Ìûà Î≥¥Í∏∞ <span>‚Üí</span>
            </a>
          </div>
        </div>
      `).join('');
      
      if (currentSlide) {
        currentSlide.style.opacity = '0';
        setTimeout(() => {
          slider.innerHTML = newContent;
          const newSlide = slider.querySelector('.solution-slide.active');
          if (newSlide) {
            setTimeout(() => {
              newSlide.style.opacity = '1';
            }, 10);
          }
        }, 200);
      } else {
        slider.innerHTML = newContent;
      }

      const indicators = document.getElementById('solutionIndicators');
      indicators.innerHTML = solutions.map((_, i) => 
        `<button class="slide-indicator ${i === solutionIndex ? 'active' : ''}" 
                 onclick="setSolution(${i})"></button>`
      ).join('');
    }
    
    function setSolution(index) {
      if (index !== solutionIndex) {
        solutionIndex = index;
        renderSolutions();
      }
    }
    
    function changeSolution(direction) {
      const newIndex = (solutionIndex + direction + solutions.length) % solutions.length;
      setSolution(newIndex);
    }
    
    let solutionAutoRotate = setInterval(() => {
      changeSolution(1);
    }, 8000);
    
    function renderCredentials() {
      const itemsPerRow = Math.ceil(credentials.length / 3);
      const row1 = credentials.slice(0, itemsPerRow);
      const row2 = credentials.slice(itemsPerRow, itemsPerRow * 2);
      const row3 = credentials.slice(itemsPerRow * 2);
      
      const row1HTML = [...row1, ...row1].map(cred => 
        `<div class="experience-item">${cred}</div>`
      ).join('');
      
      const row2HTML = [...row2, ...row2].map(cred => 
        `<div class="experience-item">${cred}</div>`
      ).join('');
      
      const row3HTML = [...row3, ...row3].map(cred => 
        `<div class="experience-item">${cred}</div>`
      ).join('');
      
      document.getElementById('experience-row-1').innerHTML = row1HTML;
      document.getElementById('experience-row-2').innerHTML = row2HTML;
      document.getElementById('experience-row-3').innerHTML = row3HTML;
    }
    
    const serviceCards = document.querySelectorAll('.service-card');
    serviceCards.forEach((card, i) => {
      gsap.fromTo(card,
        { y: 60, opacity: 0 },
        {
          y: 0,
          opacity: 1,
          duration: 0.8,
          delay: i * 0.1,
          ease: 'power3.out',
          scrollTrigger: {
            trigger: card,
            start: 'top 85%',
            toggleActions: 'play none none none',
            once: true
          }
        }
      );
    });
    
    gsap.fromTo('.services-title',
      { y: 40, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.8,
        ease: 'power3.out',
        scrollTrigger: {
          trigger: '.services-header',
          start: 'top 80%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.services-subtitle',
      { y: 30, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.8,
        delay: 0.1,
        ease: 'power3.out',
        scrollTrigger: {
          trigger: '.services-header',
          start: 'top 80%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.section-label',
      { y: 20, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.6,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.solutions-header',
          start: 'top 85%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.section-title',
      { y: 30, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.7,
        delay: 0.1,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.solutions-header',
          start: 'top 85%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.section-desc',
      { y: 20, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.6,
        delay: 0.2,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.solutions-header',
          start: 'top 85%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.solutions-slider',
      { y: 40, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.8,
        delay: 0.3,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.solutions-slider',
          start: 'top 85%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.experience-header',
      { x: -30, opacity: 0 },
      {
        x: 0,
        opacity: 1,
        duration: 0.6,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.experience',
          start: 'top 80%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.experience-track',
      { opacity: 0 },
      {
        opacity: 1,
        duration: 1,
        delay: 0.3,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.experience',
          start: 'top 80%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.trust-title',
      { y: 30, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.8,
        ease: 'power3.out',
        scrollTrigger: {
          trigger: '.trust-header',
          start: 'top 80%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.trust-subtitle',
      { y: 20, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.6,
        delay: 0.1,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.trust-header',
          start: 'top 80%',
          once: true
        }
      }
    );
    
    const trustCards = document.querySelectorAll('.trust-card');
    trustCards.forEach((card, i) => {
      gsap.fromTo(card,
        { y: 40, opacity: 0 },
        {
          y: 0,
          opacity: 1,
          duration: 0.7,
          delay: i * 0.1,
          ease: 'power2.out',
          scrollTrigger: {
            trigger: '.trust-grid',
            start: 'top 75%',
            toggleActions: 'play none none none',
            once: true
          }
        }
      );
    });
    
    gsap.fromTo('.faq-section-badge',
      { y: 20, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.6,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.faq-section-header',
          start: 'top 80%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.faq-section-title',
      { y: 30, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.8,
        delay: 0.1,
        ease: 'power3.out',
        scrollTrigger: {
          trigger: '.faq-section-header',
          start: 'top 80%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.faq-section-subtitle',
      { y: 20, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.6,
        delay: 0.2,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.faq-section-header',
          start: 'top 80%',
          once: true
        }
      }
    );
    
    const faqCards = document.querySelectorAll('.faq-card');
    faqCards.forEach((card, i) => {
      gsap.fromTo(card,
        { y: 40, opacity: 0 },
        {
          y: 0,
          opacity: 1,
          duration: 0.7,
          delay: i * 0.1,
          ease: 'power2.out',
          scrollTrigger: {
            trigger: '.faq-cards',
            start: 'top 75%',
            toggleActions: 'play none none none',
            once: true
          }
        }
      );
    });
    
    gsap.fromTo('.faq-more-link',
      { y: 20, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.6,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.faq-more-link',
          start: 'top 85%',
          once: true
        }
      }
    );
    
    const whyUsCards = document.querySelectorAll('.why-us .why-us-card');
    whyUsCards.forEach((card, i) => {
      gsap.fromTo(card,
        { y: 40, opacity: 0 },
        {
          y: 0,
          opacity: 1,
          duration: 0.7,
          delay: i * 0.1,
          ease: 'power2.out',
          scrollTrigger: {
            trigger: '.why-us',
            start: 'top 75%',
            toggleActions: 'play none none none',
            once: true
          }
        }
      );
      
      const num = card.querySelector('.why-us-number');
      if (num) {
        gsap.to(num, {
          clipPath: 'polygon(0 0, 100% 0, 100% 100%, 0 100%)',
          duration: 1,
          ease: 'power2.inOut',
          scrollTrigger: {
            trigger: card,
            start: 'top 80%',
            once: true
          }
        });
      }
    });
    
    gsap.fromTo('.why-us-title',
      { y: 30, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.8,
        ease: 'power3.out',
        scrollTrigger: {
          trigger: '.why-us-header',
          start: 'top 80%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.footer-content',
      { y: 30, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.8,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.footer',
          start: 'top 85%',
          once: true
        }
      }
    );
    
    gsap.fromTo('.footer-bottom',
      { y: 20, opacity: 0 },
      {
        y: 0,
        opacity: 1,
        duration: 0.6,
        delay: 0.2,
        ease: 'power2.out',
        scrollTrigger: {
          trigger: '.footer',
          start: 'top 85%',
          once: true
        }
      }
    );
    
    window.addEventListener('load', () => {
      renderSolutions();
      renderCredentials();
      
      function handleMobileStats() {
        const isMobile = window.innerWidth <= 1024;
        const leftStat = document.querySelector('.map-stat-left');
        const rightStat = document.querySelector('.map-stat-right');
        const bottomStat = document.querySelector('.map-stat-bottom');
        const wrapper = document.querySelector('.map-stats-wrapper');
        
        if (!leftStat || !rightStat || !bottomStat || !wrapper) return;
        
        if (isMobile) {
          wrapper.appendChild(leftStat);
          wrapper.appendChild(rightStat);
          wrapper.appendChild(bottomStat);
        } else {
          const mapContainer = document.querySelector('.korea-map-container');
          if (mapContainer) {
            mapContainer.appendChild(leftStat);
            mapContainer.appendChild(rightStat);
            mapContainer.appendChild(bottomStat);
          }
        }
      }
      
      handleMobileStats();
      window.addEventListener('resize', handleMobileStats);
    });
  